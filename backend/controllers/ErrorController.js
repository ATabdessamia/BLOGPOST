import AppError from "../utilits/AppErrors.js";

// invalid database ID
const handelCastErrDB = (err) => {
  const msg = `.${err.value}:${err.path} ØºÙŠØ± ØµØ§Ù„Ø­`;
  return new AppError(msg, 400);
};

// Duplicate same database value unique
const handelDuplicateFieldDB = (err) => {
  // eslint-disable-next-line prefer-destructuring
  const value = err.errmsg.match(/(["'])(?:\\.|[^\\])*?\1/)[0];

  const msg = `!Ø§Ù„Ø±Ø¬Ø§Ø¡ Ø§Ø³ØªØ®Ø¯Ø§Ù… Ù‚ÙŠÙ…Ø© Ø£Ø®Ø±Ù‰,
    Ù‚ÙŠÙ…Ø© Ø§Ù„Ø­Ù‚Ù„ Ø§Ù„Ù…ÙƒØ±Ø±Ø©:${value}
  `;
  return new AppError(msg, 400);
};

// mongoos validation
const handleValidationErrDB = (err) => {
  const errors = Object.values(err.errors).map((el) => el.message);
  const msg = `${errors.join(". ")} Ø¨ÙŠØ§Ù†Ø§Øª Ø¥Ø¯Ø®Ø§Ù„ ØºÙŠØ± ØµØ­ÙŠØ­Ø©`;
  return new AppError(msg, 400);
};

// JWT handlers
const handlerJWTerror = () =>
  new AppError("Ø§Ù„Ø±Ù…Ø² Ø§Ù„Ù…Ù…ÙŠØ² ØºÙŠØ± ØµØ§Ù„Ø­ØŒ Ø§Ù„Ø±Ø¬Ø§Ø¡ Ø§Ù„Ù…Ø­Ø§ÙˆÙ„Ø© Ù…Ø±Ø© Ø£Ø®Ø±Ù‰", 401);

const handlerJWTexpiredError = () =>
  new AppError(
    "Ø§Ù†ØªÙ‡Øª ØµÙ„Ø§Ø­ÙŠØ© Ø§Ù„Ø±Ù…Ø² Ø§Ù„Ù…Ù…ÙŠØ² Ø§Ù„Ø®Ø§Øµ Ø¨ÙƒØŒ Ø§Ù„Ø±Ø¬Ø§Ø¡ Ø§Ù„Ù…Ø­Ø§ÙˆÙ„Ø© Ù…Ø±Ø© Ø£Ø®Ø±Ù‰",
    401
  );

// Controle Errors
const sendErrorDev = (err, req, res) => {
  //API
  if (req.originalUrl.startsWith("/")) {
    return res.status(err.statusCode).json({
      status: err.status,
      error: err,
      message: err.message,
      stack: err.stack,
    });
  }

  //RENDERED WEBSITE
  console.error("ERROR ðŸ’¥", err);
  return res.status(err.statusCode).render("error", {
    title: "!Ø­Ø¯Ø« Ø®Ø·Ø£ Ù…Ø§",
    msg: err.message,
  });
};

const sendErrorProd = (err, req, res) => {
  //API
  if (req.originalUrl.startsWith("/")) {
    // generic msg
    if (err.isOperational) {
      return res.status(err.statusCode).json({
        status: err.status,
        message: err.message,
      });
    }
    //log err
    console.error("ERROR", err);
    // programming error or unknown error
    return res.status(500).json({
      status: err.status,
      message: "!Ø­Ø¯Ø« Ø®Ø·Ø£ Ù…Ø§",
    });
  }

  //RENDERED WEBSITE
  if (err.isOperational) {
    return res.status(err.statusCode).render("error", {
      title: "!Ø­Ø¯Ø« Ø®Ø·Ø£ Ù…Ø§",
      msg: err.message,
    });
  }

  console.error("ERROR ðŸ’¥", err);
  return res.status(err.statusCode).render("error", {
    title: "!Ø­Ø¯Ø« Ø®Ø·Ø£ Ù…Ø§",
    msg: ".Ø§Ù„Ø±Ø¬Ø§Ø¡ Ø§Ù„Ù…Ø­Ø§ÙˆÙ„Ø© Ù…Ø±Ø© Ø£Ø®Ø±Ù‰ Ù„Ø§Ø­Ù‚Ø§Ù‹",
  });
};

export default (err, req, res, next) => {
  err.statusCode = err.statusCode || 500;
  err.status = err.status || "error";

  if (process.env.NODE_ENV === "development") {
    sendErrorDev(err, req, res);
  } else if (process.env.NODE_ENV === "production") {
    if (err.name === "CastError") err = handelCastErrDB(err);
    if (err.code === 11000) err = handelDuplicateFieldDB(err);
    if (err.name === "ValidationError") err = handleValidationErrDB(err);
    if (err.name === "JsonWebTokenError") err = handlerJWTerror();
    if (err.name === "TokenExpiredError") err = handlerJWTexpiredError();
    sendErrorProd(err, req, res);
  }
};
